___header___
//* This is a little brainf***k interpreter written in frumul
Inspired by: https://github.com/pocmo/Python-Brainfuck/blob/master/brainfuck.py
*//
interpret : mark «1» lang «every» «
//* Get script *//
{f_script, text}
{script, text}
{f_script : «++>+++++[<+>-]++++++++[<++++++>-]<.»}
{f_script : «++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.»}
//* Clean the code *//
{loop char : f_script}
	{if (char = «+») |
		(char = «-») |
		(char = «<») |
		(char = «>») |
		(char = «.») |
		(char = «,») |
		(char = «[») |
		(char = «]»)
	}
		script : script + char
	{fi}
{pool}
//* Get the length *//
{len : 0, int}
{loop c : script}{len : len + 1}{pool}
//* Interpreter
*//
//* Prepare the data *//
{code_ptr : 0, int}
{cells_ptr : 0, int}
{command, text}
{cells : [0], list int}
{cells_size : 1,int}
{brace_incrementer : 0, int} //* Useful for [ and ] *//

{loop code_ptr < len}

//* Get the command pointed by ptr *//
{command : script[code_ptr]}
//* Executes the command *//

{if command = «>»}
	{cells_ptr : cells_ptr + 1}
	{if cells_ptr = cells_size}
		cells : cells + [0]
	{fi}
{fi}

{if command = «<»}
	{if cells_ptr > 0}
		{cells_ptr : cells_ptr -1}
	{else}
		{cells_ptr : 0}
	{fi}
{fi}

{if command = «+»}
	{if cells[cells_ptr] < 255}
		{cells[cells_ptr] : cells[cells_ptr] + 1}
	{else}
		{cells[cells_ptr] : 0}
	{fi}
{fi}

{if command = «-»}
	{if cells[cells_ptr] > 0}
		{cells[cells_ptr] : cells[cells_ptr] - 1}
	{else}
		{cells[cells_ptr] : 255}
	{fi}
{fi}

{if (command = «[») & (cells[cells_ptr] = 0)}
	{loop !(script[code_ptr] = «]») | (brace_incrementer > 0)}
		{code_ptr : code_ptr + 1}
		{if script[code_ptr] = «[»}
			{brace_incrementer : brace_incrementer + 1}
		{fi}
		{if (brace_incrementer > 0) & (script[code_ptr] = «]»)}
			{brace_incrementer : brace_incrementer - 1}
		{fi}
	{pool}
{fi}

{if (command = «]») & !(cells[cells_ptr] = 0)}
	{loop !(script[code_ptr] = «[») | (brace_incrementer > 0)}
		{code_ptr : code_ptr - 1}
		{if script[code_ptr] = «]»}
			{brace_incrementer : brace_incrementer + 1}
		{fi}
		{if (brace_incrementer > 0) & (script[code_ptr] = «[»)}
			{brace_incrementer : brace_incrementer - 1}
		{fi}
	{pool}
{fi}

{if command = «.»}
//* Not yet perfect: it should be printed on stdout and in ASCII*//
	{cells[cells_ptr]}
{fi}

{if command = «,»}
	',' not yet set
	{cells[cells_ptr] : -1}
{fi}

//* Increment the pointer *//
{code_ptr : code_ptr + 1}

{pool}
»
___text___
interpret 
